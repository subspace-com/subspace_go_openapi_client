/*
 * Subspace Product API
 *
 * # Introduction  The Subspace API is based on REST, has resource-oriented URLs, returns JSON-encoded responses, and returns standardHTTP response codes.  The base URL for the API is `https://api.subspace.com/`  # Naming Convention  **EARLY ACCESS NOTE:** There is no “stable” version yet.  Once there is, the version name **stable** will be used to access the latest stable API version.   * Example: `https://api.subspace.com/stable` * Version name currently in use is: *v1*   * Example: `https://api.subspace.com/v1`  # Authentication  ## API Tokens  Subspace authenticates your API requests using JWT Bearer tokens.  The provided client library requires this JWT to be set before it can be used, by setting the local access token in the local configuration.  This is done by updating the configuration line marked \"YOUR ACCESS TOKEN\" by replacing the text \"YOUR ACCESS TOKEN\" with your JWT Bearer token.  Bearer tokens are granted by requesting one (as noted below) and presenting your publishable (client_id) and secret (client_secret) tokens.     Subspace provides two types of API tokens: publishable (client_id) and secret (client_secret).  These are available in the Subspace console.   * **Publishable** API tokens (client_id) are meant solely to identify your account with Subspace, they aren’t secret. They can be published in places like your website JavaScript code, or in an iPhone or Android app.   * **Secret** API tokens (client_secret) should be kept confidential and only stored on your own servers. Your account’s secret API token will allow you to acquire a valid JWT token authorized to perform any API request to Subspace.  ## Getting a JWT Bearer Token  Subspace uses auth0 for JWT token management.  You can acquire a JWT token by utilizing `https://id.subspace.com` and following the instructions in the curl example below.  ## Protecting Your API Tokens    * **JWT tokens have a expiration time of 24 hours.**  Once expired, you will have to use your Subspace private API and public token to request a new one.   * The Subspace private token can be rotated from within the Subspace console.  Rotation may take up to 10 minutes for all systems to update state to invalidate the older token and enable the new one. * **Keep your secret token safe.** Your secret token can make any API call on behalf of your account, including changes that may impact billing such as enabling pay-as-you-go charges. Do not store your secret token in your version control system. Do not use your secret token outside your web server, such as a browser, mobile app, or distributed file.   * **You may use the Subspace console to acquire an API token.**  * **You may use the Subspace console to disable pay-as-you-go.** This may prevent unexpected charges due to unauthorized or abnormal usage.  **Acquiring a valid JWT**  Command line example: ``` curl --request POST           --url 'https://id.subspace.com/oauth/token'           --header 'content-type: application/json'           --data '{ \"client_id\": YOURCLIENTID, \"client_secret\": YOURCLIENTSECRET, \"audience\": \"https://api.subspace.com/\", \"grant_type\": \"client_credentials\" }' ``` 
 *
 * API version: 1.0
 * Contact: sales@subspace.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package subspace_openapi_client

import (
	"encoding/json"
)

// V1Accelerator struct for V1Accelerator
type V1Accelerator struct {
	DestinationIp *string `json:"destinationIp,omitempty"`
	DestinationPort *int64 `json:"destinationPort,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Protocol *V1Protocol `json:"protocol,omitempty"`
	SubspaceIp *string `json:"subspaceIp,omitempty"`
	SubspaceIpv4 *string `json:"subspaceIpv4,omitempty"`
	SubspacePort *int64 `json:"subspacePort,omitempty"`
}

// NewV1Accelerator instantiates a new V1Accelerator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Accelerator() *V1Accelerator {
	this := V1Accelerator{}
	var protocol V1Protocol = UDP
	this.Protocol = &protocol
	return &this
}

// NewV1AcceleratorWithDefaults instantiates a new V1Accelerator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AcceleratorWithDefaults() *V1Accelerator {
	this := V1Accelerator{}
	var protocol V1Protocol = UDP
	this.Protocol = &protocol
	return &this
}

// GetDestinationIp returns the DestinationIp field value if set, zero value otherwise.
func (o *V1Accelerator) GetDestinationIp() string {
	if o == nil || o.DestinationIp == nil {
		var ret string
		return ret
	}
	return *o.DestinationIp
}

// GetDestinationIpOk returns a tuple with the DestinationIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Accelerator) GetDestinationIpOk() (*string, bool) {
	if o == nil || o.DestinationIp == nil {
		return nil, false
	}
	return o.DestinationIp, true
}

// HasDestinationIp returns a boolean if a field has been set.
func (o *V1Accelerator) HasDestinationIp() bool {
	if o != nil && o.DestinationIp != nil {
		return true
	}

	return false
}

// SetDestinationIp gets a reference to the given string and assigns it to the DestinationIp field.
func (o *V1Accelerator) SetDestinationIp(v string) {
	o.DestinationIp = &v
}

// GetDestinationPort returns the DestinationPort field value if set, zero value otherwise.
func (o *V1Accelerator) GetDestinationPort() int64 {
	if o == nil || o.DestinationPort == nil {
		var ret int64
		return ret
	}
	return *o.DestinationPort
}

// GetDestinationPortOk returns a tuple with the DestinationPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Accelerator) GetDestinationPortOk() (*int64, bool) {
	if o == nil || o.DestinationPort == nil {
		return nil, false
	}
	return o.DestinationPort, true
}

// HasDestinationPort returns a boolean if a field has been set.
func (o *V1Accelerator) HasDestinationPort() bool {
	if o != nil && o.DestinationPort != nil {
		return true
	}

	return false
}

// SetDestinationPort gets a reference to the given int64 and assigns it to the DestinationPort field.
func (o *V1Accelerator) SetDestinationPort(v int64) {
	o.DestinationPort = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1Accelerator) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Accelerator) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1Accelerator) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1Accelerator) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1Accelerator) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Accelerator) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1Accelerator) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1Accelerator) SetName(v string) {
	o.Name = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *V1Accelerator) GetProtocol() V1Protocol {
	if o == nil || o.Protocol == nil {
		var ret V1Protocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Accelerator) GetProtocolOk() (*V1Protocol, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *V1Accelerator) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given V1Protocol and assigns it to the Protocol field.
func (o *V1Accelerator) SetProtocol(v V1Protocol) {
	o.Protocol = &v
}

// GetSubspaceIp returns the SubspaceIp field value if set, zero value otherwise.
func (o *V1Accelerator) GetSubspaceIp() string {
	if o == nil || o.SubspaceIp == nil {
		var ret string
		return ret
	}
	return *o.SubspaceIp
}

// GetSubspaceIpOk returns a tuple with the SubspaceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Accelerator) GetSubspaceIpOk() (*string, bool) {
	if o == nil || o.SubspaceIp == nil {
		return nil, false
	}
	return o.SubspaceIp, true
}

// HasSubspaceIp returns a boolean if a field has been set.
func (o *V1Accelerator) HasSubspaceIp() bool {
	if o != nil && o.SubspaceIp != nil {
		return true
	}

	return false
}

// SetSubspaceIp gets a reference to the given string and assigns it to the SubspaceIp field.
func (o *V1Accelerator) SetSubspaceIp(v string) {
	o.SubspaceIp = &v
}

// GetSubspaceIpv4 returns the SubspaceIpv4 field value if set, zero value otherwise.
func (o *V1Accelerator) GetSubspaceIpv4() string {
	if o == nil || o.SubspaceIpv4 == nil {
		var ret string
		return ret
	}
	return *o.SubspaceIpv4
}

// GetSubspaceIpv4Ok returns a tuple with the SubspaceIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Accelerator) GetSubspaceIpv4Ok() (*string, bool) {
	if o == nil || o.SubspaceIpv4 == nil {
		return nil, false
	}
	return o.SubspaceIpv4, true
}

// HasSubspaceIpv4 returns a boolean if a field has been set.
func (o *V1Accelerator) HasSubspaceIpv4() bool {
	if o != nil && o.SubspaceIpv4 != nil {
		return true
	}

	return false
}

// SetSubspaceIpv4 gets a reference to the given string and assigns it to the SubspaceIpv4 field.
func (o *V1Accelerator) SetSubspaceIpv4(v string) {
	o.SubspaceIpv4 = &v
}

// GetSubspacePort returns the SubspacePort field value if set, zero value otherwise.
func (o *V1Accelerator) GetSubspacePort() int64 {
	if o == nil || o.SubspacePort == nil {
		var ret int64
		return ret
	}
	return *o.SubspacePort
}

// GetSubspacePortOk returns a tuple with the SubspacePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Accelerator) GetSubspacePortOk() (*int64, bool) {
	if o == nil || o.SubspacePort == nil {
		return nil, false
	}
	return o.SubspacePort, true
}

// HasSubspacePort returns a boolean if a field has been set.
func (o *V1Accelerator) HasSubspacePort() bool {
	if o != nil && o.SubspacePort != nil {
		return true
	}

	return false
}

// SetSubspacePort gets a reference to the given int64 and assigns it to the SubspacePort field.
func (o *V1Accelerator) SetSubspacePort(v int64) {
	o.SubspacePort = &v
}

func (o V1Accelerator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DestinationIp != nil {
		toSerialize["destinationIp"] = o.DestinationIp
	}
	if o.DestinationPort != nil {
		toSerialize["destinationPort"] = o.DestinationPort
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.SubspaceIp != nil {
		toSerialize["subspaceIp"] = o.SubspaceIp
	}
	if o.SubspaceIpv4 != nil {
		toSerialize["subspaceIpv4"] = o.SubspaceIpv4
	}
	if o.SubspacePort != nil {
		toSerialize["subspacePort"] = o.SubspacePort
	}
	return json.Marshal(toSerialize)
}

type NullableV1Accelerator struct {
	value *V1Accelerator
	isSet bool
}

func (v NullableV1Accelerator) Get() *V1Accelerator {
	return v.value
}

func (v *NullableV1Accelerator) Set(val *V1Accelerator) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Accelerator) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Accelerator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Accelerator(val *V1Accelerator) *NullableV1Accelerator {
	return &NullableV1Accelerator{value: val, isSet: true}
}

func (v NullableV1Accelerator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Accelerator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


